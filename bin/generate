#!/usr/bin/env php
<?php

use Colors\Color;
use GuzzleHttp\Client;
use Wulkanowy\TimetablesListGenerator\AndroidXmlGenerator;
use Wulkanowy\TimetablesListGenerator\SimpleChecker;
use Wulkanowy\TimetablesListGenerator\FilterHelper;
use Wulkanowy\TimetablesListGenerator\NormalizeHelper;
use Wulkanowy\TimetablesListGenerator\Parser;
use Wulkanowy\TimetablesListGenerator\SortHelper;
use Wulkanowy\TimetablesListGenerator\SourcesDownloader;
use Wulkanowy\TimetablesListGenerator\TimetableChecker;
use Wulkanowy\TimetablesListGenerator\ZipExtractor;

define('ROOT_DIR', dirname(__DIR__));

$downloads = ROOT_DIR.'/downloads';

include ROOT_DIR.'/vendor/autoload.php';

$client = new Client([
    'timeout' => 40,
	'allow_redirects' => ['track_redirects' => true],
]);
$c = function(string $s)  {
    echo date('H:i:s').' ';
    return (new Color())($s);
};

if (!is_dir($downloads)) {
    mkdir($downloads, 0775);
    echo $c('Pobieranie źródeł.')->fg('green').PHP_EOL;
    $sourcesDownloader = new SourcesDownloader($client, ROOT_DIR.'/sources.json');
    $sourcesDownloader->download($downloads);

    echo $c('Rozpakowywanie...')->fg('green');
    foreach (glob($downloads.'/*.zip') as $key => $item) {
        $extractor = new ZipExtractor($item);
        $extractor->extract($downloads);
    }
    echo ' zakończone.'.PHP_EOL;
} else {
    echo $c('Używanie poprzednio pobranych źródeł.')->fg('green').PHP_EOL;
}

if (!file_exists($downloads.'/schools.json')) {
    echo $c('Parsowanie...')->fg('green').PHP_EOL;

    $province = [];
    $items = glob($downloads.'/*.xls');
    $all = count($items);
    foreach ($items as $key => $item) {
        echo $c('['.($key+1).'/'.$all.'] '.pathinfo($item)['filename'].'.xls').PHP_EOL;
        $parser = new Parser($item);
        $province[] = $parser->parse();
    }

    $schools = array_merge(...$province);

    echo $c('Parsowanie zakończone.').PHP_EOL;

    $data = json_encode($schools);

    echo $c('Zapisywanie danych...')->fg('green');
    file_put_contents($downloads.'/schools.json', $data);
    echo ' zakończone.'.PHP_EOL;
} else {
    echo $c('Używanie poprzednio sparsowanych danych.')->fg('green').PHP_EOL;
    $schools = json_decode(file_get_contents($downloads.'/schools.json'), true);
}

if (!file_exists($downloads.'/urls.json')) {
    $schools = FilterHelper::complexityFilter($schools);
    $schools = FilterHelper::wwwFilters($schools);
    $schools = FilterHelper::removeDuplicatesByValue($schools, 'www');

    foreach ($schools as $key => $item) {
        $schools[$key]['www'] = NormalizeHelper::normalizeUrl($item['www']);
    }

    $schools = FilterHelper::removeInvalidWww($schools);

    SortHelper::sortByValue($schools, 'www');

    $urls = [];

    foreach ($schools as $key => $value) {
        $urls[] = [
            'www' => $value['www'],
            'name' => $value['name'],
        ];
    }

    unset($schools);

    echo $c('Zapisywanie adresów...')->fg('green');
    file_put_contents($downloads.'/urls.json', json_encode($urls));
    echo ' zakończone.'.PHP_EOL;
} else {
    echo $c('Używanie poprzednio przygotowanych adresów.')->fg('green').PHP_EOL;
    $urls = json_decode(file_get_contents($downloads.'/urls.json'), true);
    unset($schools);
}

if (!file_exists($downloads.'/timetables.json')) {
	echo $c('Testowanie...')->fg('green');
	$checker = new SimpleChecker($client, $urls);
	$results = $checker->check();
	$timetables = $results['timetables'];
	echo $c('Odnaleziono '.count($results['filtered']).' z '.count($urls))->fg('yellow').PHP_EOL;
    unset($urls);
	echo $c('Błędów '
            .$results['errors'].' w tym błędów połączenia: '
			.$results['connectErrors'].', błędów klienta: '
			.$results['clientErrors'])->fg('yellow').PHP_EOL;
	echo $c('Testowanie zakończone.')->fg('green').PHP_EOL;

	echo $c('Zapisywanie adresów...')->fg('green');
	file_put_contents($downloads.'/timetables.json', json_encode($timetables));
	echo ' zakończone.'.PHP_EOL;
	echo $c('Zapisano listę stron z adresami do '.$downloads.'/timetables.json.')->fg('green').PHP_EOL;
} else {
    echo $c('Używanie poprzednio przygotowanych potencjalnych adresów planów lekcji.')->fg('green').PHP_EOL;
    $timetables = json_decode(file_get_contents($downloads.'/timetables.json'), true);
    unset($urls);
}

if (!file_exists($downloads.'/optivum.json')) {
    echo $c('Testowanie planów lekcji...')->fg('green');
    $checker = new TimetableChecker($client, $timetables);
    $results = $checker->check();
    echo $c('Odnaleziono '.count($results['filtered']).' z '.count($timetables))->fg('yellow').PHP_EOL;
    unset($timetables);
    echo $c('Błędów '
            .$results['errors'].' w tym błędów połączenia: '
            .$results['connectErrors'].', błędów klienta: '
            .$results['clientErrors'])->fg('yellow').PHP_EOL;
    echo $c('Testowanie zakończone.')->fg('green').PHP_EOL;

    echo $c('Zapisywanie adresów...')->fg('green');
    file_put_contents($downloads.'/optivum.json', json_encode($results['filtered']));
    $filtered = $results['filtered'];
    unset($results);
    echo ' zakończone.'.PHP_EOL;
    echo $c('Zapisano listę stron z adresami do '.$downloads.'/optivum.json.')->fg('green').PHP_EOL;
} else {
    echo $c('Używanie poprzednio wygenerowanej listy adresów planów lekcji.')->fg('green').PHP_EOL;
    $filtered = json_decode(file_get_contents($downloads.'/optivum.json'), true);
    unset($timetables);
}

echo $c('Generowanie pliku xml...')->fg('green');
$xmlGenerator = new AndroidXmlGenerator($filtered);
$xmlGenerator->save($downloads.'/timetables.xml');
echo ' zakończone.'.PHP_EOL;
